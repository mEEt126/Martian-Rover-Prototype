
chirag_sir's.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000954  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013da  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  00001eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be5  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  00003500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d30  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004d10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	52 c0       	rjmp	.+164    	; 0xa6 <__ctors_end>
   2:	00 00       	nop
   4:	ab c1       	rjmp	.+854    	; 0x35c <__vector_1>
   6:	00 00       	nop
   8:	e2 c1       	rjmp	.+964    	; 0x3ce <__vector_2>
   a:	00 00       	nop
   c:	19 c2       	rjmp	.+1074   	; 0x440 <__vector_3>
   e:	00 00       	nop
  10:	50 c2       	rjmp	.+1184   	; 0x4b2 <__vector_4>
  12:	00 00       	nop
  14:	c0 c2       	rjmp	.+1408   	; 0x596 <__vector_5>
  16:	00 00       	nop
  18:	85 c2       	rjmp	.+1290   	; 0x524 <__vector_6>
  1a:	00 00       	nop
  1c:	f5 c2       	rjmp	.+1514   	; 0x608 <__vector_7>
  1e:	00 00       	nop
  20:	db c3       	rjmp	.+1974   	; 0x7d8 <__vector_8>
  22:	00 00       	nop
  24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
  26:	00 00       	nop
  28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
  32:	00 00       	nop
  34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
  36:	00 00       	nop
  38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
  42:	00 00       	nop
  44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c3       	rjmp	.+1584   	; 0x67a <__vector_18>
  4a:	00 00       	nop
  4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
  52:	00 00       	nop
  54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
  56:	00 00       	nop
  58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
  62:	00 00       	nop
  64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
  66:	00 00       	nop
  68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
  72:	00 00       	nop
  74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
  76:	00 00       	nop
  78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
  82:	00 00       	nop
  84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
  86:	00 00       	nop
  88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cb 03       	fmulsu	r20, r19
  8e:	5f 03       	fmul	r21, r23
  90:	68 03       	fmul	r22, r16
  92:	71 03       	mulsu	r23, r17
  94:	7a 03       	fmul	r23, r18
  96:	83 03       	fmuls	r16, r19
  98:	8c 03       	fmulsu	r16, r20
  9a:	95 03       	fmuls	r17, r21
  9c:	9e 03       	fmulsu	r17, r22
  9e:	a7 03       	fmuls	r18, r23
  a0:	b1 03       	fmuls	r19, r17
  a2:	c3 03       	fmuls	r20, r19
  a4:	bb 03       	fmulsu	r19, r19

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d0 e1       	ldi	r29, 0x10	; 16
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	e0 ee       	ldi	r30, 0xE0	; 224
  ba:	f8 e0       	ldi	r31, 0x08	; 8
  bc:	00 e0       	ldi	r16, 0x00	; 0
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x14>
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a0 30       	cpi	r26, 0x00	; 0
  c8:	b1 07       	cpc	r27, r17
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x10>

000000cc <__do_clear_bss>:
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b1 e0       	ldi	r27, 0x01	; 1
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
  d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
  d6:	a1 30       	cpi	r26, 0x01	; 1
  d8:	b2 07       	cpc	r27, r18
  da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
  dc:	31 d0       	rcall	.+98     	; 0x140 <main>
  de:	fe c3       	rjmp	.+2044   	; 0x8dc <_exit>

000000e0 <__bad_interrupt>:
  e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <stop>:
	PWM_RIGHT_R =0;
	PWM_LEFT_R =0;
}
void STOP()
{
	L298_PWM_PORT = 0X00;
  e2:	19 bc       	out	0x29, r1	; 41
  e4:	18 bc       	out	0x28, r1	; 40
  e6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  ea:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ee:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  f2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  f6:	1b bc       	out	0x2b, r1	; 43
  f8:	1a bc       	out	0x2a, r1	; 42
  fa:	08 95       	ret

000000fc <pwm_init1>:
}


void pwm_init1(void)
{
	TCCR1A |= (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1)|(1<<COM1C1);   //Fast PWM,Non Inverting mode
  fc:	8f b5       	in	r24, 0x2f	; 47
  fe:	8a 6a       	ori	r24, 0xAA	; 170
 100:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=(1<<WGM12)|( 1<<WGM13)|(1<<CS11);
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	8a 61       	ori	r24, 0x1A	; 26
 106:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 10000;
 108:	80 e1       	ldi	r24, 0x10	; 16
 10a:	97 e2       	ldi	r25, 0x27	; 39
 10c:	97 bd       	out	0x27, r25	; 39
 10e:	86 bd       	out	0x26, r24	; 38
 110:	08 95       	ret

00000112 <pwm_init3>:
}

void pwm_init3(void)
{
	TCCR3A |=( 1<<WGM31)|(1<<COM3A1);//Fast PWM ,Non Inverting mode   only 3A pin
 112:	eb e8       	ldi	r30, 0x8B	; 139
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	82 68       	ori	r24, 0x82	; 130
 11a:	80 83       	st	Z, r24
	TCCR3B |=(1<<WGM32)|( 1<<WGM33)|(1<<CS31);
 11c:	ea e8       	ldi	r30, 0x8A	; 138
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8a 61       	ori	r24, 0x1A	; 26
 124:	80 83       	st	Z, r24
	ICR3 = 10000;
 126:	80 e1       	ldi	r24, 0x10	; 16
 128:	97 e2       	ldi	r25, 0x27	; 39
 12a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 12e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 132:	08 95       	ret

00000134 <interrupt_activation>:
}

void interrupt_activation(void)
{
	EICRA = 0X00;
 134:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0X00;							//interrupt LOW LEVEL
 138:	1a be       	out	0x3a, r1	; 58
	EIMSK = 0XFF;						    //interrupt  is enabled
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	89 bf       	out	0x39, r24	; 57
 13e:	08 95       	ret

00000140 <main>:
volatile int a=1,b=1,c=1,d=1;
volatile int A=1,B=1,C=1,D=1;

int main(void)
{
	DIR_DDR_F = 0XFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DIR_DDR_R = 0XFF;
 146:	87 bb       	out	0x17, r24	; 23
	L298_DDR     =   0XFF;
 148:	84 bb       	out	0x14, r24	; 20
	L298_PWM_DIR =   0X0F;
 14a:	9f e0       	ldi	r25, 0x0F	; 15
 14c:	9a bb       	out	0x1a, r25	; 26
	PWM_dir_R = 0XFF;
 14e:	87 bb       	out	0x17, r24	; 23
	sei();
 150:	78 94       	sei
 	USART_Init(8,0);				//57600 baud
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	90 e0       	ldi	r25, 0x00	; 0
 	USART_InterruptEnable(0);
 158:	74 d3       	rcall	.+1768   	; 0x842 <USART_Init>
 15a:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	90 d3       	rcall	.+1824   	; 0x87e <USART_InterruptEnable>
	
// 	USART_Init(51,1);
// 	USART_InterruptEnable(1);
// 	_delay_us(10);
	
	 pwm_init1();
 15e:	8a e1       	ldi	r24, 0x1A	; 26
	 pwm_init3();
 160:	8a 95       	dec	r24
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x20>
	 interrupt_activation();
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x26>
 166:	ca df       	rcall	.-108    	; 0xfc <pwm_init1>
	 
	 UCSR0B&=~(1<<TXEN0);
 168:	d4 df       	rcall	.-88     	; 0x112 <pwm_init3>

	while (1)
	{	
		PORTD = 0X0F;	
 16a:	e4 df       	rcall	.-56     	; 0x134 <interrupt_activation>
		PORTE = 0XF0;
 16c:	53 98       	cbi	0x0a, 3	; 10
	 
	 UCSR0B&=~(1<<TXEN0);

	while (1)
	{	
		PORTD = 0X0F;	
 16e:	9f e0       	ldi	r25, 0x0F	; 15
		PORTE = 0XF0;
 170:	80 ef       	ldi	r24, 0xF0	; 240
 172:	92 bb       	out	0x12, r25	; 18
 174:	83 b9       	out	0x03, r24	; 3
 176:	fd cf       	rjmp	.-6      	; 0x172 <main+0x32>

00000178 <forward_drive>:
	EIMSK = 0XFF;						    //interrupt  is enabled
}
		
void forward_drive(int gear)
{
	switch(gear)
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	91 05       	cpc	r25, r1
 17c:	f1 f0       	breq	.+60     	; 0x1ba <forward_drive+0x42>
 17e:	1c f4       	brge	.+6      	; 0x186 <forward_drive+0xe>
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	39 f0       	breq	.+14     	; 0x192 <forward_drive+0x1a>
 184:	08 95       	ret
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	91 05       	cpc	r25, r1
 18a:	59 f1       	breq	.+86     	; 0x1e2 <forward_drive+0x6a>
 18c:	04 97       	sbiw	r24, 0x04	; 4
 18e:	e9 f1       	breq	.+122    	; 0x20a <forward_drive+0x92>
 190:	08 95       	ret
	{
		case 1:
			DIR_PORT_F = ((1<<DIR_LEFT_F)|(1<<DIR_RIGHT_F));
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			DIR_PORT_R = ((1<<DIR_LEFT_R)|(1<<DIR_RIGHT_R));
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	88 bb       	out	0x18, r24	; 24
		
			PWM_LEFT_F = 2500;
 19c:	84 ec       	ldi	r24, 0xC4	; 196
 19e:	99 e0       	ldi	r25, 0x09	; 9
 1a0:	99 bd       	out	0x29, r25	; 41
 1a2:	88 bd       	out	0x28, r24	; 40
			PWM_RIGHT_F= 2500;
 1a4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1a8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			PWM_LEFT_R = 2500;
 1ac:	9b bd       	out	0x2b, r25	; 43
 1ae:	8a bd       	out	0x2a, r24	; 42
			PWM_RIGHT_R= 2500;
 1b0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1b4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			break;
 1b8:	08 95       	ret
		
		case 2:
			DIR_PORT_F = ((1<<DIR_LEFT_F)|(1<<DIR_RIGHT_F));
 1ba:	88 e1       	ldi	r24, 0x18	; 24
 1bc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			DIR_PORT_R = ((1<<DIR_LEFT_R)|(1<<DIR_RIGHT_R));
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	88 bb       	out	0x18, r24	; 24
			
			PWM_LEFT_F = 5000;
 1c4:	88 e8       	ldi	r24, 0x88	; 136
 1c6:	93 e1       	ldi	r25, 0x13	; 19
 1c8:	99 bd       	out	0x29, r25	; 41
 1ca:	88 bd       	out	0x28, r24	; 40
			PWM_RIGHT_F= 5000;
 1cc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1d0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			PWM_LEFT_R = 5000;
 1d4:	9b bd       	out	0x2b, r25	; 43
 1d6:	8a bd       	out	0x2a, r24	; 42
			PWM_RIGHT_R= 5000;
 1d8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1dc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			break;	
 1e0:	08 95       	ret
		
		case 3:
			DIR_PORT_F = ((1<<DIR_LEFT_F)|(1<<DIR_RIGHT_F));
 1e2:	88 e1       	ldi	r24, 0x18	; 24
 1e4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			DIR_PORT_R = ((1<<DIR_LEFT_R)|(1<<DIR_RIGHT_R));
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	88 bb       	out	0x18, r24	; 24
			
			PWM_LEFT_F = 6000;
 1ec:	80 e7       	ldi	r24, 0x70	; 112
 1ee:	97 e1       	ldi	r25, 0x17	; 23
 1f0:	99 bd       	out	0x29, r25	; 41
 1f2:	88 bd       	out	0x28, r24	; 40
			PWM_RIGHT_F= 6000;
 1f4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1f8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			PWM_LEFT_R = 6000;
 1fc:	9b bd       	out	0x2b, r25	; 43
 1fe:	8a bd       	out	0x2a, r24	; 42
			PWM_RIGHT_R= 6000;
 200:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 204:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			
			break;	
 208:	08 95       	ret
		
		case 4:
			DIR_PORT_F = ((1<<DIR_LEFT_F)|(1<<DIR_RIGHT_F));
 20a:	88 e1       	ldi	r24, 0x18	; 24
 20c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			DIR_PORT_R = ((1<<DIR_LEFT_R)|(1<<DIR_RIGHT_R));
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	88 bb       	out	0x18, r24	; 24
			
			PWM_LEFT_F = 7500;
 214:	8c e4       	ldi	r24, 0x4C	; 76
 216:	9d e1       	ldi	r25, 0x1D	; 29
 218:	99 bd       	out	0x29, r25	; 41
 21a:	88 bd       	out	0x28, r24	; 40
			PWM_RIGHT_F= 7500;
 21c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 220:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			PWM_LEFT_R = 7500;
 224:	9b bd       	out	0x2b, r25	; 43
 226:	8a bd       	out	0x2a, r24	; 42
			PWM_RIGHT_R= 7500;
 228:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 22c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 230:	08 95       	ret

00000232 <reverse_drive>:
	}
}

void reverse_drive(int re_gear)
{
	switch(re_gear)
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	91 05       	cpc	r25, r1
 236:	f1 f0       	breq	.+60     	; 0x274 <reverse_drive+0x42>
 238:	1c f4       	brge	.+6      	; 0x240 <reverse_drive+0xe>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	39 f0       	breq	.+14     	; 0x24c <reverse_drive+0x1a>
 23e:	08 95       	ret
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	91 05       	cpc	r25, r1
 244:	59 f1       	breq	.+86     	; 0x29c <reverse_drive+0x6a>
 246:	04 97       	sbiw	r24, 0x04	; 4
 248:	e9 f1       	breq	.+122    	; 0x2c4 <reverse_drive+0x92>
 24a:	08 95       	ret
	{
		case 1:
		DIR_PORT_F = ~((1<<DIR_LEFT_F)|(1<<DIR_RIGHT_F));
 24c:	87 ee       	ldi	r24, 0xE7	; 231
 24e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		DIR_PORT_R = ~((1<<DIR_LEFT_R)|(1<<DIR_RIGHT_R));
 252:	8c ef       	ldi	r24, 0xFC	; 252
 254:	88 bb       	out	0x18, r24	; 24
		
		PWM_LEFT_F = 2500;
 256:	84 ec       	ldi	r24, 0xC4	; 196
 258:	99 e0       	ldi	r25, 0x09	; 9
 25a:	99 bd       	out	0x29, r25	; 41
 25c:	88 bd       	out	0x28, r24	; 40
		PWM_RIGHT_F= 2500;
 25e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 262:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		PWM_LEFT_R = 2500;
 266:	9b bd       	out	0x2b, r25	; 43
 268:	8a bd       	out	0x2a, r24	; 42
		PWM_RIGHT_R= 2500;
 26a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 26e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		break;
 272:	08 95       	ret
		
		case 2:
		DIR_PORT_F = ((1<<DIR_LEFT_F)|(1<<DIR_RIGHT_F));
 274:	88 e1       	ldi	r24, 0x18	; 24
 276:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		DIR_PORT_R = ((1<<DIR_LEFT_R)|(1<<DIR_RIGHT_R));
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	88 bb       	out	0x18, r24	; 24
		
		PWM_LEFT_F = 5000;
 27e:	88 e8       	ldi	r24, 0x88	; 136
 280:	93 e1       	ldi	r25, 0x13	; 19
 282:	99 bd       	out	0x29, r25	; 41
 284:	88 bd       	out	0x28, r24	; 40
		PWM_RIGHT_F= 5000;
 286:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		PWM_LEFT_R = 5000;
 28e:	9b bd       	out	0x2b, r25	; 43
 290:	8a bd       	out	0x2a, r24	; 42
		PWM_RIGHT_R= 5000;
 292:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 296:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		break;
 29a:	08 95       	ret
		
		case 3:
		DIR_PORT_F = ((1<<DIR_LEFT_F)|(1<<DIR_RIGHT_F));
 29c:	88 e1       	ldi	r24, 0x18	; 24
 29e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		DIR_PORT_R = ((1<<DIR_LEFT_R)|(1<<DIR_RIGHT_R));
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	88 bb       	out	0x18, r24	; 24
		
		PWM_LEFT_F = 6000;
 2a6:	80 e7       	ldi	r24, 0x70	; 112
 2a8:	97 e1       	ldi	r25, 0x17	; 23
 2aa:	99 bd       	out	0x29, r25	; 41
 2ac:	88 bd       	out	0x28, r24	; 40
		PWM_RIGHT_F= 6000;
 2ae:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2b2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		PWM_LEFT_R = 6000;
 2b6:	9b bd       	out	0x2b, r25	; 43
 2b8:	8a bd       	out	0x2a, r24	; 42
		PWM_RIGHT_R= 6000;
 2ba:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2be:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		break;
 2c2:	08 95       	ret
		
		case 4:
		DIR_PORT_F = ((1<<DIR_LEFT_F)|(1<<DIR_RIGHT_F));
 2c4:	88 e1       	ldi	r24, 0x18	; 24
 2c6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		DIR_PORT_R = ((1<<DIR_LEFT_R)|(1<<DIR_RIGHT_R));
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	88 bb       	out	0x18, r24	; 24
		
		PWM_LEFT_F = 7500;
 2ce:	8c e4       	ldi	r24, 0x4C	; 76
 2d0:	9d e1       	ldi	r25, 0x1D	; 29
 2d2:	99 bd       	out	0x29, r25	; 41
 2d4:	88 bd       	out	0x28, r24	; 40
		PWM_RIGHT_F= 7500;
 2d6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2da:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		PWM_LEFT_R = 7500;
 2de:	9b bd       	out	0x2b, r25	; 43
 2e0:	8a bd       	out	0x2a, r24	; 42
		PWM_RIGHT_R= 7500;
 2e2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2e6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 2ea:	08 95       	ret

000002ec <angle_turn>:
	}
}

void angle_turn(char angle)
{
	if(angle=='L')
 2ec:	8c 34       	cpi	r24, 0x4C	; 76
 2ee:	c9 f4       	brne	.+50     	; 0x322 <angle_turn+0x36>
	{	DIR_PORT_F = 1<<DIR_RIGHT_F;
 2f0:	e5 e6       	ldi	r30, 0x65	; 101
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 e1       	ldi	r24, 0x10	; 16
 2f6:	80 83       	st	Z, r24
		DIR_PORT_R = 1<<DIR_RIGHT_R;
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	88 bb       	out	0x18, r24	; 24
		DIR_PORT_F &= ~(1<<DIR_LEFT_F);
 2fc:	80 81       	ld	r24, Z
 2fe:	87 7f       	andi	r24, 0xF7	; 247
 300:	80 83       	st	Z, r24
		DIR_PORT_R &= ~(1<<DIR_LEFT_R);
 302:	c0 98       	cbi	0x18, 0	; 24
		PWM_LEFT_F = 5000;
 304:	88 e8       	ldi	r24, 0x88	; 136
 306:	93 e1       	ldi	r25, 0x13	; 19
 308:	99 bd       	out	0x29, r25	; 41
 30a:	88 bd       	out	0x28, r24	; 40
		PWM_RIGHT_F= 5000;
 30c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 310:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		PWM_LEFT_R = 5000;
 314:	9b bd       	out	0x2b, r25	; 43
 316:	8a bd       	out	0x2a, r24	; 42
		PWM_RIGHT_R= 5000;
 318:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 31c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 320:	08 95       	ret
	}
	else 
	{
	DIR_PORT_F = (1<<DIR_LEFT_F);
 322:	e5 e6       	ldi	r30, 0x65	; 101
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	88 e0       	ldi	r24, 0x08	; 8
 328:	80 83       	st	Z, r24
	DIR_PORT_R = (1<<DIR_LEFT_R);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	88 bb       	out	0x18, r24	; 24
	DIR_PORT_F = ~(1<<DIR_RIGHT_F);
 32e:	8f ee       	ldi	r24, 0xEF	; 239
 330:	80 83       	st	Z, r24
	DIR_PORT_R = ~(1<<DIR_RIGHT_R);
 332:	8d ef       	ldi	r24, 0xFD	; 253
 334:	88 bb       	out	0x18, r24	; 24
		PWM_LEFT_F = 5000;
 336:	88 e8       	ldi	r24, 0x88	; 136
 338:	93 e1       	ldi	r25, 0x13	; 19
 33a:	99 bd       	out	0x29, r25	; 41
 33c:	88 bd       	out	0x28, r24	; 40
		PWM_RIGHT_F= 5000;
 33e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 342:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		PWM_LEFT_R = 5000;
 346:	9b bd       	out	0x2b, r25	; 43
 348:	8a bd       	out	0x2a, r24	; 42
		PWM_RIGHT_R= 5000;
 34a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 34e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 352:	08 95       	ret

00000354 <L1_forward>:
	L298_PWM_PORT &= ~(1<<PWM_R2);
}

void L1_forward()
{
	L298_PORT |= 1<<dir_L1_1;
 354:	a8 9a       	sbi	0x15, 0	; 21
	L298_PORT &= ~(1<<dir_L1_2);
 356:	a9 98       	cbi	0x15, 1	; 21
	L298_PWM_PORT |=  1<<PWM_L1;
 358:	d8 9a       	sbi	0x1b, 0	; 27
 35a:	08 95       	ret

0000035c <__vector_1>:
		
	}
}	

ISR(INT0_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	0b b6       	in	r0, 0x3b	; 59
 368:	0f 92       	push	r0
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
	L1_forward();
 380:	ff 93       	push	r31
	UCSR0B|=(1<<TXEN0);
 382:	e8 df       	rcall	.-48     	; 0x354 <L1_forward>
	USART_Transmitchar('0',0);
 384:	53 9a       	sbi	0x0a, 3	; 10
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	80 e3       	ldi	r24, 0x30	; 48
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	83 d2       	rcall	.+1286   	; 0x892 <USART_Transmitchar>
 38c:	2f ef       	ldi	r18, 0xFF	; 255
 38e:	81 ee       	ldi	r24, 0xE1	; 225
 390:	94 e0       	ldi	r25, 0x04	; 4
 392:	21 50       	subi	r18, 0x01	; 1
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <__vector_1+0x36>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <__vector_1+0x40>
	_delay_ms(200);
	L298_PWM_PORT &= ~(1<<PWM_L1);
 39c:	00 00       	nop
}
 39e:	d8 98       	cbi	0x1b, 0	; 27
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0b be       	out	0x3b, r0	; 59
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <L1_reverse>:
	L298_PWM_PORT |=  1<<PWM_L1;
}

void L1_reverse()
{
	L298_PORT |= 1<<dir_L1_2;
 3c6:	a9 9a       	sbi	0x15, 1	; 21
	L298_PORT &= ~(1<<dir_L1_1);
 3c8:	a8 98       	cbi	0x15, 0	; 21
	L298_PWM_PORT |=  1<<PWM_L1;
 3ca:	d8 9a       	sbi	0x1b, 0	; 27
 3cc:	08 95       	ret

000003ce <__vector_2>:
	_delay_ms(200);
	L298_PWM_PORT &= ~(1<<PWM_L1);
}

ISR(INT1_vect)
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	0b b6       	in	r0, 0x3b	; 59
 3da:	0f 92       	push	r0
 3dc:	2f 93       	push	r18
 3de:	3f 93       	push	r19
 3e0:	4f 93       	push	r20
 3e2:	5f 93       	push	r21
 3e4:	6f 93       	push	r22
 3e6:	7f 93       	push	r23
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
 3ec:	af 93       	push	r26
 3ee:	bf 93       	push	r27
 3f0:	ef 93       	push	r30
	L1_reverse();
 3f2:	ff 93       	push	r31
	UCSR0B|=(1<<TXEN0);
 3f4:	e8 df       	rcall	.-48     	; 0x3c6 <L1_reverse>
	USART_Transmitchar('1',0);
 3f6:	53 9a       	sbi	0x0a, 3	; 10
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	81 e3       	ldi	r24, 0x31	; 49
 3fc:	4a d2       	rcall	.+1172   	; 0x892 <USART_Transmitchar>
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	81 ee       	ldi	r24, 0xE1	; 225
 402:	94 e0       	ldi	r25, 0x04	; 4
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	_delay_ms(200);
	L298_PWM_PORT &= ~(1<<PWM_L1);
 40e:	00 00       	nop
}
 410:	d8 98       	cbi	0x1b, 0	; 27
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0b be       	out	0x3b, r0	; 59
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <L2_forward>:
	L298_PWM_PORT |=  1<<PWM_L1;
}

void L2_forward()
{
	L298_PORT |= 1<<dir_L2_1;
 438:	aa 9a       	sbi	0x15, 2	; 21
	L298_PORT &= ~(1<<dir_L2_2);
 43a:	ab 98       	cbi	0x15, 3	; 21
	L298_PWM_PORT |=  1<<PWM_L2;
 43c:	d9 9a       	sbi	0x1b, 1	; 27
 43e:	08 95       	ret

00000440 <__vector_3>:
	_delay_ms(200);
	L298_PWM_PORT &= ~(1<<PWM_L1);
}

ISR(INT2_vect)
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	0b b6       	in	r0, 0x3b	; 59
 44c:	0f 92       	push	r0
 44e:	2f 93       	push	r18
 450:	3f 93       	push	r19
 452:	4f 93       	push	r20
 454:	5f 93       	push	r21
 456:	6f 93       	push	r22
 458:	7f 93       	push	r23
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	af 93       	push	r26
 460:	bf 93       	push	r27
 462:	ef 93       	push	r30
	L2_forward();
 464:	ff 93       	push	r31
	UCSR0B|=(1<<TXEN0);
 466:	e8 df       	rcall	.-48     	; 0x438 <L2_forward>
	USART_Transmitchar('2',0);
 468:	53 9a       	sbi	0x0a, 3	; 10
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	82 e3       	ldi	r24, 0x32	; 50
 46e:	11 d2       	rcall	.+1058   	; 0x892 <USART_Transmitchar>
 470:	2f ef       	ldi	r18, 0xFF	; 255
 472:	80 e7       	ldi	r24, 0x70	; 112
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <__vector_3+0x36>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__vector_3+0x40>
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_L2);
 480:	00 00       	nop
}
 482:	d9 98       	cbi	0x1b, 1	; 27
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0b be       	out	0x3b, r0	; 59
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <L2_reverse>:
	L298_PWM_PORT |=  1<<PWM_L2;
}

void L2_reverse()
{
	L298_PORT |= 1<<dir_L2_2;
 4aa:	ab 9a       	sbi	0x15, 3	; 21
	L298_PORT &= ~(1<<dir_L2_1);
 4ac:	aa 98       	cbi	0x15, 2	; 21
	L298_PWM_PORT |=  1<<PWM_L2;
 4ae:	d9 9a       	sbi	0x1b, 1	; 27
 4b0:	08 95       	ret

000004b2 <__vector_4>:
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_L2);
}

ISR(INT3_vect)
{
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	0b b6       	in	r0, 0x3b	; 59
 4be:	0f 92       	push	r0
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
	L2_reverse();
 4d6:	ff 93       	push	r31
	
	UCSR0B|=(1<<TXEN0);
 4d8:	e8 df       	rcall	.-48     	; 0x4aa <L2_reverse>
	USART_Transmitchar('3',0);
 4da:	53 9a       	sbi	0x0a, 3	; 10
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	83 e3       	ldi	r24, 0x33	; 51
 4e0:	d8 d1       	rcall	.+944    	; 0x892 <USART_Transmitchar>
 4e2:	2f ef       	ldi	r18, 0xFF	; 255
 4e4:	80 e7       	ldi	r24, 0x70	; 112
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__vector_4+0x36>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__vector_4+0x40>
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_L2);
 4f2:	00 00       	nop
}
 4f4:	d9 98       	cbi	0x1b, 1	; 27
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0b be       	out	0x3b, r0	; 59
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <R1_forward>:
	L298_PWM_PORT |=  1<<PWM_L2;
}

void R1_forward()
{
	L298_PORT |= 1<<dir_R1_1;
 51c:	ac 9a       	sbi	0x15, 4	; 21
	L298_PORT &= ~(1<<dir_R1_2);
 51e:	ad 98       	cbi	0x15, 5	; 21
	L298_PWM_PORT |=  1<<PWM_R1;
 520:	da 9a       	sbi	0x1b, 2	; 27
 522:	08 95       	ret

00000524 <__vector_6>:
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_R1);
}

ISR(INT5_vect)
{
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	0b b6       	in	r0, 0x3b	; 59
 530:	0f 92       	push	r0
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	6f 93       	push	r22
 53c:	7f 93       	push	r23
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
	R1_forward();
 548:	ff 93       	push	r31
	UCSR0B|=(1<<TXEN0);
 54a:	e8 df       	rcall	.-48     	; 0x51c <R1_forward>
	USART_Transmitchar('5',0);
 54c:	53 9a       	sbi	0x0a, 3	; 10
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	85 e3       	ldi	r24, 0x35	; 53
 552:	9f d1       	rcall	.+830    	; 0x892 <USART_Transmitchar>
 554:	2f ef       	ldi	r18, 0xFF	; 255
 556:	80 e7       	ldi	r24, 0x70	; 112
 558:	92 e0       	ldi	r25, 0x02	; 2
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	80 40       	sbci	r24, 0x00	; 0
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <__vector_6+0x36>
 562:	00 c0       	rjmp	.+0      	; 0x564 <__vector_6+0x40>
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_R1);
 564:	00 00       	nop
}
 566:	da 98       	cbi	0x1b, 2	; 27
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	7f 91       	pop	r23
 576:	6f 91       	pop	r22
 578:	5f 91       	pop	r21
 57a:	4f 91       	pop	r20
 57c:	3f 91       	pop	r19
 57e:	2f 91       	pop	r18
 580:	0f 90       	pop	r0
 582:	0b be       	out	0x3b, r0	; 59
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <R1_reverse>:
	L298_PWM_PORT |=  1<<PWM_R1;
}

void R1_reverse()
{
	L298_PORT |= 1<<dir_R1_2;
 58e:	ad 9a       	sbi	0x15, 5	; 21
	L298_PORT &= ~(1<<dir_R1_1);
 590:	ac 98       	cbi	0x15, 4	; 21
	L298_PWM_PORT |=  1<<PWM_R1;
 592:	da 9a       	sbi	0x1b, 2	; 27
 594:	08 95       	ret

00000596 <__vector_5>:
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_L2);
}

ISR(INT4_vect)
{
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	0f 92       	push	r0
 59e:	11 24       	eor	r1, r1
 5a0:	0b b6       	in	r0, 0x3b	; 59
 5a2:	0f 92       	push	r0
 5a4:	2f 93       	push	r18
 5a6:	3f 93       	push	r19
 5a8:	4f 93       	push	r20
 5aa:	5f 93       	push	r21
 5ac:	6f 93       	push	r22
 5ae:	7f 93       	push	r23
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
 5b4:	af 93       	push	r26
 5b6:	bf 93       	push	r27
 5b8:	ef 93       	push	r30
	
	R1_reverse();
 5ba:	ff 93       	push	r31
	UCSR0B|=(1<<TXEN0);
 5bc:	e8 df       	rcall	.-48     	; 0x58e <R1_reverse>
	USART_Transmitchar('4',0);
 5be:	53 9a       	sbi	0x0a, 3	; 10
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	84 e3       	ldi	r24, 0x34	; 52
 5c4:	66 d1       	rcall	.+716    	; 0x892 <USART_Transmitchar>
 5c6:	2f ef       	ldi	r18, 0xFF	; 255
 5c8:	80 e7       	ldi	r24, 0x70	; 112
 5ca:	92 e0       	ldi	r25, 0x02	; 2
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <__vector_5+0x36>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__vector_5+0x40>
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_R1);
 5d6:	00 00       	nop
}
 5d8:	da 98       	cbi	0x1b, 2	; 27
 5da:	ff 91       	pop	r31
 5dc:	ef 91       	pop	r30
 5de:	bf 91       	pop	r27
 5e0:	af 91       	pop	r26
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	7f 91       	pop	r23
 5e8:	6f 91       	pop	r22
 5ea:	5f 91       	pop	r21
 5ec:	4f 91       	pop	r20
 5ee:	3f 91       	pop	r19
 5f0:	2f 91       	pop	r18
 5f2:	0f 90       	pop	r0
 5f4:	0b be       	out	0x3b, r0	; 59
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <R2_forward>:
	L298_PWM_PORT |=  1<<PWM_R1;
}

void R2_forward()
{
	L298_PORT |= 1<<dir_R2_1;
 600:	ae 9a       	sbi	0x15, 6	; 21
	L298_PORT &= ~(1<<dir_R2_2);
 602:	af 98       	cbi	0x15, 7	; 21
	L298_PWM_PORT |=  1<<PWM_R2;
 604:	db 9a       	sbi	0x1b, 3	; 27
 606:	08 95       	ret

00000608 <__vector_7>:
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_R1);
}

ISR(INT6_vect)
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	0b b6       	in	r0, 0x3b	; 59
 614:	0f 92       	push	r0
 616:	2f 93       	push	r18
 618:	3f 93       	push	r19
 61a:	4f 93       	push	r20
 61c:	5f 93       	push	r21
 61e:	6f 93       	push	r22
 620:	7f 93       	push	r23
 622:	8f 93       	push	r24
 624:	9f 93       	push	r25
 626:	af 93       	push	r26
 628:	bf 93       	push	r27
 62a:	ef 93       	push	r30
	R2_forward();
 62c:	ff 93       	push	r31
	UCSR0B|=(1<<TXEN0);
 62e:	e8 df       	rcall	.-48     	; 0x600 <R2_forward>
	USART_Transmitchar('6',0);
 630:	53 9a       	sbi	0x0a, 3	; 10
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	86 e3       	ldi	r24, 0x36	; 54
 636:	2d d1       	rcall	.+602    	; 0x892 <USART_Transmitchar>
 638:	2f ef       	ldi	r18, 0xFF	; 255
 63a:	80 e7       	ldi	r24, 0x70	; 112
 63c:	92 e0       	ldi	r25, 0x02	; 2
 63e:	21 50       	subi	r18, 0x01	; 1
 640:	80 40       	sbci	r24, 0x00	; 0
 642:	90 40       	sbci	r25, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <__vector_7+0x36>
 646:	00 c0       	rjmp	.+0      	; 0x648 <__vector_7+0x40>
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_R2);
 648:	00 00       	nop
}
 64a:	db 98       	cbi	0x1b, 3	; 27
 64c:	ff 91       	pop	r31
 64e:	ef 91       	pop	r30
 650:	bf 91       	pop	r27
 652:	af 91       	pop	r26
 654:	9f 91       	pop	r25
 656:	8f 91       	pop	r24
 658:	7f 91       	pop	r23
 65a:	6f 91       	pop	r22
 65c:	5f 91       	pop	r21
 65e:	4f 91       	pop	r20
 660:	3f 91       	pop	r19
 662:	2f 91       	pop	r18
 664:	0f 90       	pop	r0
 666:	0b be       	out	0x3b, r0	; 59
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <R2_reverse>:
	L298_PWM_PORT |=  1<<PWM_R2;
}

void R2_reverse()
{
	L298_PORT |= 1<<dir_R2_2;
 672:	af 9a       	sbi	0x15, 7	; 21
	L298_PORT &= ~(1<<dir_R2_1);
 674:	ae 98       	cbi	0x15, 6	; 21
	L298_PWM_PORT |=  1<<PWM_R2;
 676:	db 9a       	sbi	0x1b, 3	; 27
 678:	08 95       	ret

0000067a <__vector_18>:
		PORTE = 0XF0;
	} 

}
ISR(USART0_RX_vect)
{
 67a:	1f 92       	push	r1
 67c:	0f 92       	push	r0
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	0f 92       	push	r0
 682:	11 24       	eor	r1, r1
 684:	0b b6       	in	r0, 0x3b	; 59
 686:	0f 92       	push	r0
 688:	2f 93       	push	r18
 68a:	3f 93       	push	r19
 68c:	4f 93       	push	r20
 68e:	5f 93       	push	r21
 690:	6f 93       	push	r22
 692:	7f 93       	push	r23
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
 698:	af 93       	push	r26
 69a:	bf 93       	push	r27
 69c:	ef 93       	push	r30
 69e:	ff 93       	push	r31
	receive_call = USART_Receive(0);
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	05 d1       	rcall	.+522    	; 0x8ae <USART_Receive>
 6a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	//USART_Transmitchar(receive_call,0);
	switch (receive_call)
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	fc 01       	movw	r30, r24
 6ac:	e1 54       	subi	r30, 0x41	; 65
 6ae:	f1 09       	sbc	r31, r1
 6b0:	ed 30       	cpi	r30, 0x0D	; 13
 6b2:	f1 05       	cpc	r31, r1
 6b4:	08 f0       	brcs	.+2      	; 0x6b8 <__vector_18+0x3e>
 6b6:	77 c0       	rjmp	.+238    	; 0x7a6 <__vector_18+0x12c>
 6b8:	ea 5b       	subi	r30, 0xBA	; 186
 6ba:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		case 'B':   
		forward_drive(1);
 6bc:	06 c1       	rjmp	.+524    	; 0x8ca <__tablejump2__>
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
		UCSR0B|=(1<<TXEN0);
		USART_Transmitchar(receive_call,0);
 6c2:	5a dd       	rcall	.-1356   	; 0x178 <forward_drive>
 6c4:	53 9a       	sbi	0x0a, 3	; 10
 6c6:	60 e0       	ldi	r22, 0x00	; 0
		break;
 6c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
		
		case 'C':	
		forward_drive(2);
 6cc:	e2 d0       	rcall	.+452    	; 0x892 <USART_Transmitchar>
 6ce:	71 c0       	rjmp	.+226    	; 0x7b2 <__vector_18+0x138>
		UCSR0B|=(1<<TXEN0);
 6d0:	82 e0       	ldi	r24, 0x02	; 2
		USART_Transmitchar(receive_call,0);
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	51 dd       	rcall	.-1374   	; 0x178 <forward_drive>
 6d6:	53 9a       	sbi	0x0a, 3	; 10
 6d8:	60 e0       	ldi	r22, 0x00	; 0
		break;
 6da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
		
		case 'D':	
		forward_drive(3);
 6de:	d9 d0       	rcall	.+434    	; 0x892 <USART_Transmitchar>
 6e0:	68 c0       	rjmp	.+208    	; 0x7b2 <__vector_18+0x138>
		UCSR0B|=(1<<TXEN0);
		USART_Transmitchar(receive_call,0);
 6e2:	83 e0       	ldi	r24, 0x03	; 3
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	48 dd       	rcall	.-1392   	; 0x178 <forward_drive>
		break;
		
		case 'E':	
		forward_drive(4);
 6e8:	53 9a       	sbi	0x0a, 3	; 10
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
		UCSR0B|=(1<<TXEN0);
		USART_Transmitchar(receive_call,0);
 6f0:	d0 d0       	rcall	.+416    	; 0x892 <USART_Transmitchar>
 6f2:	5f c0       	rjmp	.+190    	; 0x7b2 <__vector_18+0x138>
 6f4:	84 e0       	ldi	r24, 0x04	; 4
 6f6:	90 e0       	ldi	r25, 0x00	; 0
		break;
 6f8:	3f dd       	rcall	.-1410   	; 0x178 <forward_drive>
		
		case 'F':	
		reverse_drive(1);
 6fa:	53 9a       	sbi	0x0a, 3	; 10
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
		UCSR0B|=(1<<TXEN0);
		USART_Transmitchar(receive_call,0);
 702:	c7 d0       	rcall	.+398    	; 0x892 <USART_Transmitchar>
 704:	56 c0       	rjmp	.+172    	; 0x7b2 <__vector_18+0x138>
 706:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
		case 'G':	
		reverse_drive(2);
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	93 dd       	rcall	.-1242   	; 0x232 <reverse_drive>
 70c:	53 9a       	sbi	0x0a, 3	; 10
		UCSR0B|=(1<<TXEN0);
		USART_Transmitchar(receive_call,0);
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 714:	be d0       	rcall	.+380    	; 0x892 <USART_Transmitchar>
		break;
 716:	4d c0       	rjmp	.+154    	; 0x7b2 <__vector_18+0x138>
		
		case 'H':	
		reverse_drive(3);
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	90 e0       	ldi	r25, 0x00	; 0
		UCSR0B|=(1<<TXEN0);
		USART_Transmitchar(receive_call,0);
 71c:	8a dd       	rcall	.-1260   	; 0x232 <reverse_drive>
 71e:	53 9a       	sbi	0x0a, 3	; 10
		break;
 720:	60 e0       	ldi	r22, 0x00	; 0
		
		case 'I':	
		reverse_drive(4);
 722:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
		UCSR0B|=(1<<TXEN0);
		USART_Transmitchar(receive_call,0);
 726:	b5 d0       	rcall	.+362    	; 0x892 <USART_Transmitchar>
 728:	44 c0       	rjmp	.+136    	; 0x7b2 <__vector_18+0x138>
		break;
		
	
		
		case 'J':	
			L1_forward();
 72a:	83 e0       	ldi	r24, 0x03	; 3
			L2_forward();
 72c:	90 e0       	ldi	r25, 0x00	; 0
			R1_forward();
 72e:	81 dd       	rcall	.-1278   	; 0x232 <reverse_drive>
 730:	53 9a       	sbi	0x0a, 3	; 10
			R2_forward();
 732:	60 e0       	ldi	r22, 0x00	; 0
			UCSR0B|=(1<<TXEN0);
			USART_Transmitchar(receive_call,0);
 734:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 738:	ac d0       	rcall	.+344    	; 0x892 <USART_Transmitchar>
 73a:	3b c0       	rjmp	.+118    	; 0x7b2 <__vector_18+0x138>
			break;
 73c:	84 e0       	ldi	r24, 0x04	; 4
		
		case 'K': //for u_turn
			L1_reverse();
 73e:	90 e0       	ldi	r25, 0x00	; 0
			L2_reverse();
 740:	78 dd       	rcall	.-1296   	; 0x232 <reverse_drive>
			R1_reverse();
 742:	53 9a       	sbi	0x0a, 3	; 10
 744:	60 e0       	ldi	r22, 0x00	; 0
			R2_reverse();
 746:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
			UCSR0B|=(1<<TXEN0);
			USART_Transmitchar(receive_call,0);
 74a:	a3 d0       	rcall	.+326    	; 0x892 <USART_Transmitchar>
 74c:	32 c0       	rjmp	.+100    	; 0x7b2 <__vector_18+0x138>
 74e:	02 de       	rcall	.-1020   	; 0x354 <L1_forward>
			break;
 750:	73 de       	rcall	.-794    	; 0x438 <L2_forward>
			
		case 'M': // left angle turn
			angle_turn('L');
 752:	e4 de       	rcall	.-568    	; 0x51c <R1_forward>
 754:	55 df       	rcall	.-342    	; 0x600 <R2_forward>
			UCSR0B|=(1<<TXEN0);
 756:	53 9a       	sbi	0x0a, 3	; 10
			USART_Transmitchar(receive_call,0);
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 75e:	99 d0       	rcall	.+306    	; 0x892 <USART_Transmitchar>
 760:	28 c0       	rjmp	.+80     	; 0x7b2 <__vector_18+0x138>
			break;
 762:	31 de       	rcall	.-926    	; 0x3c6 <L1_reverse>
			
		case 'L': // RIGHT angle turn
			angle_turn('R');
 764:	a2 de       	rcall	.-700    	; 0x4aa <L2_reverse>
 766:	13 df       	rcall	.-474    	; 0x58e <R1_reverse>
 768:	84 df       	rcall	.-248    	; 0x672 <R2_reverse>
			UCSR0B|=(1<<TXEN0);	
 76a:	53 9a       	sbi	0x0a, 3	; 10
			USART_Transmitchar(receive_call,0);
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 772:	8f d0       	rcall	.+286    	; 0x892 <USART_Transmitchar>
 774:	1e c0       	rjmp	.+60     	; 0x7b2 <__vector_18+0x138>
			break;				
 776:	8c e4       	ldi	r24, 0x4C	; 76
		
		case 'A':
			stop();
 778:	b9 dd       	rcall	.-1166   	; 0x2ec <angle_turn>
 77a:	53 9a       	sbi	0x0a, 3	; 10
	PWM_RIGHT_R =0;
	PWM_LEFT_R =0;
}
void STOP()
{
	L298_PWM_PORT = 0X00;
 77c:	60 e0       	ldi	r22, 0x00	; 0
			break;				
		
		case 'A':
			stop();
			STOP();
			UCSR0B|=(1<<TXEN0);
 77e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
			USART_Transmitchar(receive_call,0);
 782:	87 d0       	rcall	.+270    	; 0x892 <USART_Transmitchar>
 784:	16 c0       	rjmp	.+44     	; 0x7b2 <__vector_18+0x138>
 786:	82 e5       	ldi	r24, 0x52	; 82
 788:	b1 dd       	rcall	.-1182   	; 0x2ec <angle_turn>
			break;
 78a:	53 9a       	sbi	0x0a, 3	; 10
			
		default:
			stop();
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
			STOP();
			UCSR0B|=(1<<TXEN0);
 792:	7f d0       	rcall	.+254    	; 0x892 <USART_Transmitchar>
			USART_Transmitchar('z',0);
 794:	0e c0       	rjmp	.+28     	; 0x7b2 <__vector_18+0x138>
 796:	a5 dc       	rcall	.-1718   	; 0xe2 <stop>
 798:	1b ba       	out	0x1b, r1	; 27
 79a:	53 9a       	sbi	0x0a, 3	; 10
			break;	
	}	
}
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 7a2:	77 d0       	rcall	.+238    	; 0x892 <USART_Transmitchar>
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <__vector_18+0x138>
 7a6:	9d dc       	rcall	.-1734   	; 0xe2 <stop>
 7a8:	1b ba       	out	0x1b, r1	; 27
 7aa:	53 9a       	sbi	0x0a, 3	; 10
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	8a e7       	ldi	r24, 0x7A	; 122
 7b0:	70 d0       	rcall	.+224    	; 0x892 <USART_Transmitchar>
 7b2:	ff 91       	pop	r31
 7b4:	ef 91       	pop	r30
 7b6:	bf 91       	pop	r27
 7b8:	af 91       	pop	r26
 7ba:	9f 91       	pop	r25
 7bc:	8f 91       	pop	r24
 7be:	7f 91       	pop	r23
 7c0:	6f 91       	pop	r22
 7c2:	5f 91       	pop	r21
 7c4:	4f 91       	pop	r20
 7c6:	3f 91       	pop	r19
 7c8:	2f 91       	pop	r18
 7ca:	0f 90       	pop	r0
 7cc:	0b be       	out	0x3b, r0	; 59
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <__vector_8>:
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_R2);
}

ISR(INT7_vect)
{
 7d8:	1f 92       	push	r1
 7da:	0f 92       	push	r0
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	0f 92       	push	r0
 7e0:	11 24       	eor	r1, r1
 7e2:	0b b6       	in	r0, 0x3b	; 59
 7e4:	0f 92       	push	r0
 7e6:	2f 93       	push	r18
 7e8:	3f 93       	push	r19
 7ea:	4f 93       	push	r20
 7ec:	5f 93       	push	r21
 7ee:	6f 93       	push	r22
 7f0:	7f 93       	push	r23
 7f2:	8f 93       	push	r24
 7f4:	9f 93       	push	r25
 7f6:	af 93       	push	r26
 7f8:	bf 93       	push	r27
 7fa:	ef 93       	push	r30
	
	R2_reverse();
 7fc:	ff 93       	push	r31
	UCSR0B|=(1<<TXEN0);
 7fe:	39 df       	rcall	.-398    	; 0x672 <R2_reverse>
	USART_Transmitchar('7',0);
 800:	53 9a       	sbi	0x0a, 3	; 10
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	87 e3       	ldi	r24, 0x37	; 55
 806:	45 d0       	rcall	.+138    	; 0x892 <USART_Transmitchar>
 808:	2f ef       	ldi	r18, 0xFF	; 255
 80a:	80 e7       	ldi	r24, 0x70	; 112
 80c:	92 e0       	ldi	r25, 0x02	; 2
 80e:	21 50       	subi	r18, 0x01	; 1
 810:	80 40       	sbci	r24, 0x00	; 0
 812:	90 40       	sbci	r25, 0x00	; 0
 814:	e1 f7       	brne	.-8      	; 0x80e <__vector_8+0x36>
 816:	00 c0       	rjmp	.+0      	; 0x818 <__vector_8+0x40>
	_delay_ms(100);
	L298_PWM_PORT &= ~(1<<PWM_R2);
 818:	00 00       	nop
}
 81a:	db 98       	cbi	0x1b, 3	; 27
 81c:	ff 91       	pop	r31
 81e:	ef 91       	pop	r30
 820:	bf 91       	pop	r27
 822:	af 91       	pop	r26
 824:	9f 91       	pop	r25
 826:	8f 91       	pop	r24
 828:	7f 91       	pop	r23
 82a:	6f 91       	pop	r22
 82c:	5f 91       	pop	r21
 82e:	4f 91       	pop	r20
 830:	3f 91       	pop	r19
 832:	2f 91       	pop	r18
 834:	0f 90       	pop	r0
 836:	0b be       	out	0x3b, r0	; 59
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <USART_Init>:



void USART_Init( unsigned int baud, uint8_t n )
{
	sei();
 842:	78 94       	sei
	if(n)
 844:	66 23       	and	r22, r22
 846:	79 f0       	breq	.+30     	; 0x866 <USART_Init+0x24>
	{
		//Initialize baud Rate(4800)
		UBRR1H=(unsigned char)(baud>>8);
 848:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		UBRR1L=(unsigned char)baud;
 84c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
		//TX RX Enable
		UCSR1B|=(1<<RXEN0)|(1<<TXEN0);
 850:	ea e9       	ldi	r30, 0x9A	; 154
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	88 61       	ori	r24, 0x18	; 24
 858:	80 83       	st	Z, r24
		//Set 8-bit data, Parity disabled
		UCSR1C |=(3<<UCSZ10);
 85a:	ed e9       	ldi	r30, 0x9D	; 157
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	86 60       	ori	r24, 0x06	; 6
 862:	80 83       	st	Z, r24
 864:	08 95       	ret
		
	}else
	{
		//Initialize baud Rate(9600)
		UBRR0H=(unsigned char)(baud>>8);
 866:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
		UBRR0L=(unsigned char)baud;
 86a:	89 b9       	out	0x09, r24	; 9
		//TX RX Enable
		UCSR0B|=(1<<RXEN0)|(1<<TXEN0);//|(1<<UCSZ02);
 86c:	8a b1       	in	r24, 0x0a	; 10
 86e:	88 61       	ori	r24, 0x18	; 24
 870:	8a b9       	out	0x0a, r24	; 10
		//Set 8-bit data, Parity disabled
		UCSR0C |= (3<<UCSZ00);
 872:	e5 e9       	ldi	r30, 0x95	; 149
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	86 60       	ori	r24, 0x06	; 6
 87a:	80 83       	st	Z, r24
 87c:	08 95       	ret

0000087e <USART_InterruptEnable>:
	
}

void USART_InterruptEnable(uint8_t n)
{
	if(n)
 87e:	88 23       	and	r24, r24
 880:	31 f0       	breq	.+12     	; 0x88e <USART_InterruptEnable+0x10>
	{
		UCSR1B|=(1<<RXCIE1);
 882:	ea e9       	ldi	r30, 0x9A	; 154
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	80 68       	ori	r24, 0x80	; 128
 88a:	80 83       	st	Z, r24
 88c:	08 95       	ret
	}
	else UCSR0B|=(1<<RXCIE0);
 88e:	57 9a       	sbi	0x0a, 7	; 10
 890:	08 95       	ret

00000892 <USART_Transmitchar>:
}

void USART_Transmitchar( unsigned char data, uint8_t n )
{
	if(n)
 892:	66 23       	and	r22, r22
 894:	41 f0       	breq	.+16     	; 0x8a6 <USART_Transmitchar+0x14>
	{
		while ( !( UCSR1A & (1<<UDRE1)) );
 896:	eb e9       	ldi	r30, 0x9B	; 155
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	90 81       	ld	r25, Z
 89c:	95 ff       	sbrs	r25, 5
 89e:	fd cf       	rjmp	.-6      	; 0x89a <USART_Transmitchar+0x8>
		UDR1=data;
 8a0:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 8a4:	08 95       	ret
	}else
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
 8a6:	5d 9b       	sbis	0x0b, 5	; 11
 8a8:	fe cf       	rjmp	.-4      	; 0x8a6 <USART_Transmitchar+0x14>
		UDR0=data;
 8aa:	8c b9       	out	0x0c, r24	; 12
 8ac:	08 95       	ret

000008ae <USART_Receive>:
	}
}

unsigned char USART_Receive(uint8_t n )
{
	if(n)
 8ae:	88 23       	and	r24, r24
 8b0:	41 f0       	breq	.+16     	; 0x8c2 <USART_Receive+0x14>
	{
		while (! (UCSR1A & (1 << RXC1)) );
 8b2:	eb e9       	ldi	r30, 0x9B	; 155
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	80 81       	ld	r24, Z
 8b8:	88 23       	and	r24, r24
 8ba:	ec f7       	brge	.-6      	; 0x8b6 <USART_Receive+0x8>
    	return UDR1;
 8bc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 8c0:	08 95       	ret
	}
	else 
	{
		while (! (UCSR0A & (1 << RXC0)) );
 8c2:	5f 9b       	sbis	0x0b, 7	; 11
 8c4:	fe cf       	rjmp	.-4      	; 0x8c2 <USART_Receive+0x14>
    	return UDR0;
 8c6:	8c b1       	in	r24, 0x0c	; 12
	}
}
 8c8:	08 95       	ret

000008ca <__tablejump2__>:
 8ca:	ee 0f       	add	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	00 24       	eor	r0, r0
 8d0:	00 1c       	adc	r0, r0
 8d2:	0b be       	out	0x3b, r0	; 59
 8d4:	07 90       	elpm	r0, Z+
 8d6:	f6 91       	elpm	r31, Z
 8d8:	e0 2d       	mov	r30, r0
 8da:	09 94       	ijmp

000008dc <_exit>:
 8dc:	f8 94       	cli

000008de <__stop_program>:
 8de:	ff cf       	rjmp	.-2      	; 0x8de <__stop_program>
